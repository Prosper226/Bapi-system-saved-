"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Coinbase_instances, _Coinbase_axiosInstance, _Coinbase_apiKey, _Coinbase_apiSecret, _Coinbase_apiVersion, _Coinbase_mockMode, _Coinbase_useMocks, _Coinbase_getRequestHeaders;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coinbase = void 0;
const crypto_1 = __importDefault(require("crypto"));
const axios_1 = __importDefault(require("axios"));
const retry_axios_1 = __importDefault(require("retry-axios"));
const uuid_1 = require("uuid");
const mocks_1 = require("./mocks");
class Coinbase {
    constructor(options) {
        var _a, _b, _c, _d;
        _Coinbase_instances.add(this);
        _Coinbase_axiosInstance.set(this, void 0);
        _Coinbase_apiKey.set(this, void 0);
        _Coinbase_apiSecret.set(this, void 0);
        _Coinbase_apiVersion.set(this, void 0);
        _Coinbase_mockMode.set(this, void 0);
        __classPrivateFieldSet(this, _Coinbase_axiosInstance, axios_1.default.create(Object.assign({ baseURL: "https://api.coinbase.com" }, options === null || options === void 0 ? void 0 : options.axiosConfig)), "f");
        __classPrivateFieldGet(this, _Coinbase_axiosInstance, "f").defaults.raxConfig = {
            instance: __classPrivateFieldGet(this, _Coinbase_axiosInstance, "f")
        };
        retry_axios_1.default.attach(__classPrivateFieldGet(this, _Coinbase_axiosInstance, "f"));
        __classPrivateFieldSet(this, _Coinbase_apiKey, (_a = options === null || options === void 0 ? void 0 : options.apiKey) !== null && _a !== void 0 ? _a : null, "f");
        __classPrivateFieldSet(this, _Coinbase_apiSecret, (_b = options === null || options === void 0 ? void 0 : options.apiSecret) !== null && _b !== void 0 ? _b : null, "f");
        __classPrivateFieldSet(this, _Coinbase_apiVersion, (_c = options === null || options === void 0 ? void 0 : options.apiVersion) !== null && _c !== void 0 ? _c : null, "f");
        __classPrivateFieldSet(this, _Coinbase_mockMode, (_d = options === null || options === void 0 ? void 0 : options.mockMode) !== null && _d !== void 0 ? _d : false, "f");
    }
    getAccounts(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const method = "GET";
            const path = "/v2/accounts";
            const headers = __classPrivateFieldGet(this, _Coinbase_instances, "m", _Coinbase_getRequestHeaders).call(this, {
                method,
                path
            });
            if (__classPrivateFieldGet(this, _Coinbase_instances, "m", _Coinbase_useMocks).call(this, options)) {
                return {
                    accounts: [mocks_1.MOCK_ACCOUNT],
                    nextPage: null
                };
            }
            const response = yield __classPrivateFieldGet(this, _Coinbase_axiosInstance, "f").request(Object.assign(Object.assign({ method, url: path }, options === null || options === void 0 ? void 0 : options.axiosConfig), { headers: Object.assign(Object.assign({}, headers), (_a = options === null || options === void 0 ? void 0 : options.axiosConfig) === null || _a === void 0 ? void 0 : _a.headers) }));
            const data = response.data;
            return {
                accounts: data.data,
                nextPage: data.pagination.next_uri
            };
        });
    }
    sendMoney(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const method = "POST";
            const path = `/v2/accounts/${options.accountId}/transactions`;
            const body = {
                type: "send",
                to: options.to,
                amount: options.amount,
                currency: options.currency,
                description: options.description,
                skip_notifications: options.skipNotifications,
                fee: options.fee,
                idem: uuid_1.v4(),
                to_financial_institution: options.toFinancialInstitution,
                financial_institution_website: options.financialInstitutionWebsite
            };
            const headers = __classPrivateFieldGet(this, _Coinbase_instances, "m", _Coinbase_getRequestHeaders).call(this, {
                method,
                path,
                body: JSON.stringify(body)
            });
            if (__classPrivateFieldGet(this, _Coinbase_instances, "m", _Coinbase_useMocks).call(this, options)) {
                return mocks_1.MOCK_TRANSACTION;
            }
            const response = yield __classPrivateFieldGet(this, _Coinbase_axiosInstance, "f").request(Object.assign(Object.assign({ method, url: path, data: body }, options.axiosConfig), { headers: Object.assign(Object.assign({}, headers), (_a = options.axiosConfig) === null || _a === void 0 ? void 0 : _a.headers), raxConfig: Object.assign({ 
                    // Retrying is okay because we always send an idempotency token
                    httpMethodsToRetry: [method] }, (_b = options.axiosConfig) === null || _b === void 0 ? void 0 : _b.raxConfig) }));
            return response.data.data;
        });
    }
    getExchangeRates(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _Coinbase_instances, "m", _Coinbase_useMocks).call(this, options)) {
                return mocks_1.MOCK_EXCHANGE_RATES;
            }
            const response = yield __classPrivateFieldGet(this, _Coinbase_axiosInstance, "f").request(Object.assign(Object.assign({ method: "GET", url: `/v2/exchange-rates` }, options === null || options === void 0 ? void 0 : options.axiosConfig), { params: Object.assign({ currency: options === null || options === void 0 ? void 0 : options.currency }, (_a = options === null || options === void 0 ? void 0 : options.axiosConfig) === null || _a === void 0 ? void 0 : _a.params) }));
            return response.data.data;
        });
    }
}
exports.Coinbase = Coinbase;
_Coinbase_axiosInstance = new WeakMap(), _Coinbase_apiKey = new WeakMap(), _Coinbase_apiSecret = new WeakMap(), _Coinbase_apiVersion = new WeakMap(), _Coinbase_mockMode = new WeakMap(), _Coinbase_instances = new WeakSet(), _Coinbase_useMocks = function _Coinbase_useMocks(options) {
    if (typeof (options === null || options === void 0 ? void 0 : options.mockMode) === "boolean") {
        return options.mockMode;
    }
    return __classPrivateFieldGet(this, _Coinbase_mockMode, "f");
}, _Coinbase_getRequestHeaders = function _Coinbase_getRequestHeaders(options) {
    var _a, _b, _c, _d;
    const apiKey = (_a = options.apiKey) !== null && _a !== void 0 ? _a : __classPrivateFieldGet(this, _Coinbase_apiKey, "f");
    if (!apiKey) {
        throw new Error("Missing Coinbase API key");
    }
    const apiSecret = (_b = options.apiSecret) !== null && _b !== void 0 ? _b : __classPrivateFieldGet(this, _Coinbase_apiSecret, "f");
    if (!apiSecret) {
        throw new Error("Missing Coinbase API secret");
    }
    const secondsSinceEpoch = Math.floor(new Date().getTime() / 1000);
    let data = secondsSinceEpoch + options.method + options.path;
    if (options.body) {
        data += options.body;
    }
    const signature = crypto_1.default
        .createHmac("sha256", apiSecret)
        .update(data)
        .digest("hex");
    return {
        "CB-ACCESS-KEY": apiKey,
        "CB-ACCESS-SIGN": signature,
        "CB-ACCESS-TIMESTAMP": secondsSinceEpoch,
        "CB-VERSION": (_d = (_c = options.apiVersion) !== null && _c !== void 0 ? _c : __classPrivateFieldGet(this, _Coinbase_apiVersion, "f")) !== null && _d !== void 0 ? _d : undefined
    };
};
